using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Collections;

namespace Randomator
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("randomator Copyright (c) 2010 Bjoern Seip");

            if ((args.Length < 3) || (args.Length > 4))
            {  
                Console.WriteLine("Syntax:\r\n\r\nrandomator length count target-file [old-code-file]\r\n\r\n");
                return;
            }

            char[] charpool = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'K', 'L', 'M', 'N', 'P', 'R' , 'T', 'W', 'X', 'Y', 'Z', '2', '3', '4', '6', '7', '8', '9' };
            
            int code_length;
            int code_count;
            string target_file_path;
            string old_file_path = "";
            ArrayList al_old; 

            code_length = int.Parse(args[0]);
            code_count = int.Parse(args[1]);
            target_file_path = args[2];

            al_old = new ArrayList();

            if (args.Length > 3)
            {
                old_file_path = args[3];
                
                using (StreamReader swCodeFile = new StreamReader(old_file_path))
                {
                    string oldcode;
                    while (!swCodeFile.EndOfStream)
                    {
                        oldcode = swCodeFile.ReadLine();
                        al_old.Add(oldcode);
                    }
                }
            }

            Random rnd = new Random();

            ArrayList al = new ArrayList();

            int i = 0;

            while (i < code_count)
            {
                string rnd_str = "";
                int rnd_no = -1;
                int rnd_no_last = -1;

                int j = 0;
                while (j < code_length)
                {
                    rnd_no_last = rnd_no;
                    rnd_no = rnd.Next(0, charpool.Length - 1);
                    if (rnd_no_last != rnd_no)
                    {
                        rnd_str = rnd_str + charpool[rnd_no];
                        j++;
                    }
                }

                bool found = false;

                foreach(string value in al)
                {
                    if (value == rnd_str)
                    {
                        found = true;
                        Console.WriteLine("DOUBLE");
                    }
                }

                foreach (string value in al_old)
                {
                    if (value == rnd_str)
                    {
                        found = true;
                        Console.WriteLine("DOUBLE IN OLD FILE");
                    }
                }

                if (!found)
                {
                    al.Add(rnd_str);
                    i++;
                }
            }


            using (StreamWriter swCodeFile = new StreamWriter(target_file_path))
            {
                DateTime d1 = DateTime.Now;

                swCodeFile.WriteLine("*************************************");
                swCodeFile.WriteLine("* Codes generated by randomator 1.0 *");
                swCodeFile.WriteLine("* " + d1.ToString() + "               *");
                swCodeFile.WriteLine("*************************************");

                foreach (string value in al)
                {
                    swCodeFile.WriteLine(value);
                }

            }

            
        }

    }

    class Code : IComparable
    {
        private string _code;

        public string CodeValue
        {
            get { return _code; }
            set { _code = value; }
        }

        public string Generate(int pLength)
        {
            return "0";
        }

        #region IComparable Members

        public int CompareTo(object obj)
        {
            return _code.CompareTo(((Code)obj).CodeValue);
        }

        #endregion
    }


    


}
